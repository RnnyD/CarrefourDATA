import pandas as pd
import os
from dotenv import load_dotenv
from datetime import datetime
import re
import time
import sys
import requests
import json

# Charger la cl√© API depuis le fichier .env
load_dotenv()
API_KEY = os.getenv("PERPLEXITY_API_KEY") or "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"

# Param√®tres
EXCEL_FILE = "Group_7_holdings.xlsx"
SHEET_NAME = "Sheet1"
PERPLEXITY_URL = "https://api.perplexity.ai/chat/completions"

# Prompt
BASE_PROMPT = """
**Question**  
Est-ce qu‚Äôil existe de **nouvelles marques r√©centes** rattach√©es √† la **m√™me gamme ou segment de march√© que {brand}**, et d√©tenues par la holding {holding} ?

**R√¥le**  
Expert en veille commerciale & analyste M&A certifi√©

**Consignes op√©rationnelles**  
1. **V√©rification crois√©e avanc√©e**  
   - Identifier jusqu‚Äô√† **3 nouvelles marques** pertinentes, en excluant celles d√©j√† connues ou list√©es  
   - S‚Äôassurer qu‚Äôelles appartiennent clairement √† la m√™me gamme/segment que {brand}

2. **Sources autoris√©es**  
   - Bases d‚Äôentreprises (Infogreffe, Pappers)  
   - Communiqu√©s de presse corporate  
   - M√©dias √©conomiques fiables (Les √âchos, Capital Finance, LSA, Usine Nouvelle)  
   - Plateformes M&A (Fusacq, MergerMarket)

3. **Crit√®res de fiabilit√©**  
   ‚úÖ Lien explicite avec {brand} ou la gamme concern√©e  
   ‚úÖ Source dat√©e   
   ‚úÖ Mention claire de la d√©tention par {holding}  

4. **Filtrage obligatoire**  
   - ‚ùå Exclure les doublons ou marques d√©j√† pr√©sentes dans les bases existantes  
   - ‚ùå Ne pas mentionner des produits ou des gammes, uniquement des **marques commerciales d√©pos√©es**

---

**OUTPUT structur√© (obligatoire)** :  
Nom de la marque 1

Si aucune marque d√©tect√©e :  
`Aucune nouvelle marque d√©tect√©e`
"""

# Appel API Perplexity
def query_perplexity(prompt):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "sonar",
        "messages": [
            {"role": "system", "content": "Tu es un expert en veille strat√©gique, M&A et marques internationales."},
            {"role": "user", "content": prompt}
        ]
    }
    try:
        response = requests.post(PERPLEXITY_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"‚ùå Erreur API : {e}")
        return "Erreur"

# Barre de chargement
def barre_de_chargement(duree=5):
    barre = ["‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ", "‚ñà"]
    print("\033[92mRecherche en cours :", end=" ", flush=True)
    for i in range(duree * 4):
        sys.stdout.write(barre[i % len(barre)])
        sys.stdout.flush()
        time.sleep(0.25)
        sys.stdout.write('\b')
    print("‚úÖ\033[0m")

# Charger le fichier Excel
df = pd.read_excel(EXCEL_FILE, sheet_name=SHEET_NAME)

# Ajouter colonne pour nouvelles marques si absente
if "Nouvelles Marques" not in df.columns:
    df["Nouvelles Marques"] = ""

# Liste des marques connues pour √©viter les doublons
marques_connues = set(df["Brand Name"].dropna().str.lower())

# Recherche par holding
today_str = datetime.now().strftime("%Y-%m-%d %H:%M")
holdings_uniques = df["Main Holding Name"].dropna().unique()

for holding in holdings_uniques:
    sous_df = df[df["Main Holding Name"] == holding]
    brand_ref = sous_df["Brand Name"].dropna().iloc[0] if not sous_df.empty else "aucune"

    print(f"\nüîç Recherche de nouvelles marques pour la holding : {holding} (exemple : {brand_ref})")
    prompt = BASE_PROMPT.format(brand=brand_ref, holding=holding)
    result = query_perplexity(prompt)

    if result.lower().strip() == "aucune nouvelle marque d√©tect√©e":
        nouvelles_marques = "Aucune"
    else:
        lignes = [line.strip() for line in result.splitlines() if line.strip() and not line.startswith("`")]
        uniques = []
        for marque in lignes:
            nom = marque.lower()
            if nom not in marques_connues and nom not in [m.lower() for m in uniques]:
                uniques.append(marque)
                marques_connues.add(nom)
        nouvelles_marques = ", ".join(uniques) if uniques else "Aucune"

    df.loc[df["Main Holding Name"] == holding, "Nouvelles Marques"] = nouvelles_marques
    barre_de_chargement()

# Export final
date_str = datetime.now().strftime("%Y-%m-%d_%H-%M")
output_file = f"NewBrandsDetection_{date_str}.xlsx"
df.to_excel(output_file, index=False)
print(f"\n‚úÖ Nouveau fichier cr√©√© : {output_file}")
