import pandas as pd
import os
import re
import time
import sys
import requests
from dotenv import load_dotenv
from datetime import datetime

# Charger la cl√© API depuis le fichier .env
load_dotenv()
API_KEY = os.getenv("PERPLEXITY_API_KEY") or "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"

# Param√®tres
EXCEL_FILE = "Group_7_holdings.xlsx"
SHEET_NAME = "Sheet1"
PERPLEXITY_URL = "https://api.perplexity.ai/chat/completions"

# Prompt 
BASE_PROMPT = """
**Question**  
Est-ce que la marque {brand} appartient toujours √† la holding {holding} ?

**R√¥le**  
Expert en veille commerciale & analyste M&A certifi√©

**Consignes op√©rationnelles**  
1. **Triple v√©rification crois√©e**  
   - V√©rifier via 3 sources ind√©pendantes parmi :  
     - Bases d'entreprises (Infogreffe, Pappers)  
     - Actualit√©s √©conomiques (Les √âchos, Capital Finance)  
     - Communiqu√©s presse officiels  
     - Plateformes M&A sp√©cialis√©es (Fusacq, MergerMarket)

2. **Crit√®res de fiabilit√©**  
   ‚úÖ Sources de moins de 6 mois  
   ‚úÖ Donn√©es primaires (Kbis, rapports annuels)  
   ‚úÖ Citations multiples concordantes

3. **Analyse de certitude**  
   - 100 = confirmation unanime + documentation l√©gale  
   - 90 = 2 sources fiables + absence de contradiction  
   - <70 = divergence entre sources

OUTPUT structur√©e: 
Si Oui, Niveau de certitude
Si Non, Niveau de certitude, La nouvelle holding actuelle

Je ne veux pas de phrase, ni d'explication

"""

# Fonction d‚Äôappel API
def query_perplexity(prompt):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "sonar",
        "messages": [
            {"role": "system", "content": "Tu es un expert en veille strat√©gique, M&A et marques internationales."},
            {"role": "user", "content": prompt}
        ]
    }
    try:
        response = requests.post(PERPLEXITY_URL, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"‚ùå Erreur API : {e}")
        return "Erreur"

# Barre de chargement verte
def barre_de_chargement(duree=5):
    barre = ["‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ", "‚ñà"]
    print("\033[92mRecherche en cours :", end=" ", flush=True)
    for i in range(duree * 4):
        sys.stdout.write(barre[i % len(barre)])
        sys.stdout.flush()
        time.sleep(0.25)
        sys.stdout.write('\b')
    print("‚úÖ\033[0m")

# Chargement du fichier Excel
df = pd.read_excel(EXCEL_FILE, sheet_name=SHEET_NAME)

# Ajout des colonnes si absentes
for col in ["Statut", "Score", "Date de v√©rification", "NEW Holding"]:
    if col not in df.columns:
        df[col] = ""

# Date du jour
today_str = datetime.now().strftime("%Y-%m-%d %H:%M")

# Traitement ligne par ligne
for index, row in df.head(40).iterrows():  # Limite √† 40 lignes
    holding = str(row["Main Holding Name"])
    brand = str(row["Brand Name"])

    print(f"\nüîç Recherche pour : {brand} / Holding : {holding}")
    prompt = BASE_PROMPT.format(brand=brand, holding=holding)
    result = query_perplexity(prompt)

    # Analyse du r√©sultat
    cleaned_result = result.replace(",", ".")
    match = re.search(r"(Oui|Non)[^\d]*(\d{1,3})", cleaned_result)

    if match:
        statut, score = match.groups()
        score_int = int(score)
    else:
        statut, score, score_int = "Erreur", "", 0
        print(f"‚ö†Ô∏è R√©ponse inattendue : {result}")

    new_holding = ""
    if statut == "Non" and score_int > 85:
        match_holding = re.search(r"(?i)non\s+\d+\s*\+?\s*(.*)", cleaned_result)
        if match_holding:
            new_holding = match_holding.group(1).strip()
        else:
            new_holding = "Non pr√©cis√©e"

    # Mise √† jour des valeurs dans le fichier
    df.at[index, "Statut"] = statut
    df.at[index, "Score"] = score
    df.at[index, "Date de v√©rification"] = today_str
    df.at[index, "NEW Holding"] = new_holding

    barre_de_chargement()

# Export final
date_str = datetime.now().strftime("%Y-%m-%d_%H-%M")
output_file = f"CarrefourVC_{date_str}.xlsx"
df.to_excel(output_file, index=False)
print(f"\n‚úÖ Nouveau fichier cr√©√© : {output_file}")
